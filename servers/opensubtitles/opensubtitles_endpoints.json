{
  "formats": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/infos/formats",
    "description": "Subtitle Formats - List subtitle formats recognized by the API",
    "timeout": 30
  },
  "languages": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/infos/languages",
    "description": "Languages - Get the languages information",
    "timeout": 30
  },
  "popular": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/discover/popular",
    "description": "Popular features - Discover popular features on opensubtitles.com, according to last 30 days downloads.",
    "query_params": {
      "language": "{language}",
      "type": "{type}"
    },
    "timeout": 30
  },
  "latest": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/discover/latest",
    "description": "Latest subtitles - Lists 60 latest uploaded subtitles",
    "query_params": {
      "language": "{language}",
      "type": "{type}"
    },
    "timeout": 30
  },
  "most_downloaded": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/discover/most_downloaded",
    "description": "Most downloaded subtitles - Discover popular subtitles, according to last 30 days downloads on opensubtitles.com. This list can be filtered by language code or feature type (movie, episode)",
    "query_params": {
      "language": "{language}",
      "type": "{type}"
    },
    "timeout": 30
  },
  "features": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/features",
    "description": "Search for features - With the \"query\" parameter, search for a Feature from a simple text input. Typically used for a text search or autocomplete.\n\nWith an ID, get basic information and subtitles count for a specific title.\n\nWith the \"query_match\" you can define the matched applied to the query: \n - \"start\" is the default behavior, it will query on the first letter entered to offer suggestions\n - \"word\" will return the match on the word, but not always matching the fulll title, for example searching \"roma\" will return \"holiday in roma\"\n - \"exact\" will exactly match the title, so here searching for \"roma\" will only return the movie(s) named \"roma\" \n\nWith the \"full_search\" you can extend the search to the translations of the title, so \"roma\" will also return \"rome\" \n\n<!-- theme: warning -->\n\n> ### Watch Out!\n>\n> If you create an autocomplete, don't set a too small refresh limit, remember you must not go over 40 requests per 10 seconds!",
    "query_params": {
      "query": "{query}",
      "type": "{type}",
      "feature_id": "1",
      "imdb_id": "{imdb_id}",
      "tmdb_id": "{tmdb_id}",
      "year": "1",
      "query_match": "{query_match}",
      "full_search": "{full_search}"
    },
    "timeout": 30
  },
  "subtitles": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/subtitles",
    "description": "Search for subtitles - Find subtitle for a video file. All parameters can be combined following various logics: searching by a specific external id (imdb, tmdb), a file moviehash, or a simple text query.\n\n<!-- theme: warning -->\n> Something wrong? Read about [common mistakes and best practices](docs/2-Best-Practices.md). \n\n> Getting no results? Follow HTTP redirects! ```curl --location``` and use verbose mode\n\n> Use ```imdb_id for``` movie or episode. Use ```parent_imdb_id``` for TV Shows\n\n\n\nImplement the logic that best fits your needs, keeping in mind the following guidelines:\n\n- If you can obtain the moviehash from the file, please send it along.\n- If you possess the ID, whether it's IMDB or TMDB, send it instead of a query, as an ID provides more precision.\n- When searching for TV show episodes, it is recommended to send the parent ID, along with the episode and season number for optimal results.  If you have the unique ID of an episode, only send this ID, excluding the episode or season number.\n- Include the filename as a query parameter along with the moviehash for improved results. If your filenames are generally irrelevant, such as dynamically generated filenames from a streaming service, there's no need to include them.\n- Consider treating parameters as filters rather than additional criteria. If you have a specific ID and send a query with conflicting data, like a wrong year, it could result in fewer matches.\n- Explore querying the /features endpoint to gather the exact list of available episodes.\n- Keep in mind that this is a collaborative project where subtitles are submitted by users, filtered by admins, and movie/show results are processed through various APIs. Occasionally, errors may occur, and we depend on user feedback to address and rectify them.\n\n\n> Avoid http redirection by sending request parameters sorted and without default values, and send all queries in lowercase. Remove leading zeroes in ID parameters (IMDB ID, TMDB ID...)\n\n### Moviehash \nIf a ```moviehash``` is sent with a request, a ```moviehash_match``` boolean field will be added to the response.\n\nThe matching subtitles will always come first in the response.\n\n\n### Ordering\n\n<!-- theme: warning -->\n> If possible, don't order results, because sorting on server is \"expensive, time consuming operation\" and also you have much higher chance to get cached result when not using this function.\n\nYou can order the results using the ```order_by``` parameter. Ordering is possible on the following fields:\n```language```, ```download_count```, ```new_download_count```, ```hearing_impaired```, ```hd```, ```fps```, ```votes```, ```points```, ```ratings```, ```from_trusted```, ```foreign_parts_only```, ```ai_translated```, ```machine_translated```, ```upload_date```, ```release```, ```comments```\n\nChange the order direction with *order_direction* (asc/desc)\n\n### Final notes\n```ai_translated``` (default include in search results) subtitles should be much better quality than ```machine_translated``` subtitles (excluded in search results).",
    "query_params": {
      "id": "1",
      "imdb_id": "1",
      "tmdb_id": "1",
      "type": "{type}",
      "query": "{query}",
      "languages": "{languages}",
      "moviehash": "{moviehash}",
      "uploader_id": "1",
      "hearing_impaired": "{hearing_impaired}",
      "foreign_parts_only": "{foreign_parts_only}",
      "trusted_sources": "{trusted_sources}",
      "machine_translated": "{machine_translated}",
      "ai_translated": "{ai_translated}",
      "order_by": "{order_by}",
      "order_direction": "{order_direction}",
      "parent_feature_id": "1",
      "parent_imdb_id": "1",
      "parent_tmdb_id": "1",
      "season_number": "1",
      "episode_number": "1",
      "year": "1",
      "moviehash_match": "{moviehash_match}",
      "page": "1"
    },
    "timeout": 30
  },
  "download": {
    "method": "POST",
    "url": "https://api.opensubtitles.com/api/v1/download",
    "description": "Download subtitles - Request a download url for a subtitle. Subtitle file in temporary URL will be always in UTF-8 encoding.",
    "body_template": "{\"file_id\": \"{file_id}\"}", 
    "timeout": 60
  },
  "guessit": {
    "method": "GET",
    "url": "https://api.opensubtitles.com/api/v1/utilities/guessit",
    "description": "Guessit - Extracts as much information as possible from a video filename.\n\nIt has a very powerful matcher that allows to guess properties from a video using its filename only. This matcher works with both movies and tv shows episodes.\n\nThis is a simple implementation of the python guessit library.\nhttps://guessit-io.github.io/guessit/\n\nFind examples of the returned data.\nhttps://guessit-io.github.io/guessit/properties/",
    "query_params": {
      "filename": "{filename}"
    },
    "timeout": 30
  }
}